openapi: '3.0.1'
info:
  title: pizza store
  version: "2"
  description: pizza store kata version 2

tags:
  - name: products
  - name: orders

servers:
  - url: http://localhost:8080/api

paths:
  /products:
    post:
      tags:
        - products
      summary: add product
      operationId: addProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        201:
          description: add new pizza successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
  /products/{id}:
    delete:
      tags:
        - products
      summary: delete product by Id
      operationId: deleteProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: delete existing pizza successfully
          content:
            application/json:
              schema:
                type: string

  /product-list:
    get:
      tags:
        - products
      summary: get All Products
      operationId: getAll
      responses:
        200:
          description: get all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDto'
  /product-list/{category}:
    get:
      tags:
        - products
      summary: get product by category
      operationId: getProductByCategory
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDto'
  /orders/prepare:
    post:
      tags:
        - orders
      summary: order Pizza and/or Drink
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateDto'
      responses:
        201:
          description: place order successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDto'
  /orders/change-status/{id}:
    patch:
      tags:
        - orders
      summary: change status of order
      operationId: changeOrderStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusDto'
      responses:
        200:
          description: order status has been changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDto'
        "404":
          description: "API not found"
          content:
            application/json:
              schema:
                type: object

components:
  schemas:
    ProductDto:
      type: object
      description: Product Dto
      required:
        - name
        - category
        - description
        - price
        - image
      properties:
        id:
          type: string
        category:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        images:
          type: array
          items:
            type: string
            format: base64
    ImageDto:
      type: object
      required:
        - base64Content
        - contentType
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        contentType:
          type: string
        base64Content:
          type: string
          format: base64
        productId:
          type: string
          format: uuid
    OrderCreateDto:
      type: object
      required:
        - customerName
        - phoneNumber
        - deliveryTo
        - finalAmount
        - orderItems
      properties:
        id:
          type: integer
          format: int32
        bookingDate:
          type: string
          format: yyyy-MM-dd HH:mm:ss
        customerName:
          type: string
        phoneNumber:
          type: string
        deliveryTo:
          type: string
        status:
          $ref: '#/components/schemas/StatusDto'
        finalAmount:
          type: number
          format: float
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreateDto'
    OrderItemCreateDto:
      type: object
      required:
        - productId
        - quantity
        - totalAmount
      properties:
        id:
          type: integer
          format: int32
        orderId:
          type: integer
          format: int32
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          format: int32
        totalAmount:
          type: number
          format: float
    OrderResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        bookingDate:
          type: string
          format: yyyy-MM-dd HH:mm:ss
        customerName:
          type: string
        phoneNumber:
          type: string
        deliveryTo:
          type: string
        status:
          $ref: '#/components/schemas/StatusDto'
        finalAmount:
          type: number
          format: float
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponseDto'
    OrderItemResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        orderId:
          type: integer
          format: int32
        productName:
          type: string
        quantity:
          type: integer
          format: int32
        totalAmount:
          type: number
          format: float
    OrderStatusDto:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/StatusDto'
    StatusDto:
      type: string
      enum: [ PENDING, CONFIRMED, COOKED, DONE ]






