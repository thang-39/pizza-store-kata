openapi: '3.0.1'
info:
  title: pizza store
  version: "1"
  description: pizza store kata

servers:
  - url: http://localhost:8080/api
paths:
  /staff:
    post:
      summary: create staff
      operationId: createStaff
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StaffRequestDto'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffResponseDto'
#  /staff/{id}:
#    get:
#      summary: get staff by username
#      operationId: getUserById
#      parameters:
#        - name: id
#          in: path
#          required: true
#          schema:
#            type: string
#      responses:
#        200:
#          description: OK
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/UserDto'
  /pizza:
    post:
      summary: add pizza
      operationId: addPizza
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PizzaDto'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PizzaDto'
  /pizza/{id}:
    put:
      summary: edit pizza
      operationId: editPizza
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PizzaDto'
      responses:
        200:
          description: Existing record is updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PizzaDto'
  /product-list/pizza:
    get:
      summary: get pizza list
      operationId: getPizzaList
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PizzaDto'
  /images-folder/pizza/{id}:
    post:
      summary: save an image of pizza, store file path of image to database
      operationId: savePizzaImageToFolder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: string
                  format: binary
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDto'
  /images-db/pizza/{id}:
    post:
      summary: save an image of pizza, store image data to db
      operationId: savePizzaImageToDb
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: string
                  format: binary
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDto'
components:
  schemas:
    StaffRequestDto:
      type: object
      description: Staff Request Dto
      required:
        - username
        - role
        - password
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
          minLength: 3
          maxLength: 10
        role:
          type: string
        password:
          type: string
          minLength: 3
          maxLength: 16
    StaffResponseDto:
      type: object
      description: Staff Response Dto
      required:
        - username
        - role
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
          minLength: 3
          maxLength: 10
        role:
          type: string
    PizzaDto:
      type: object
      description: Pizza Dto
      required:
        - name
        - description
        - price
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        images:
          type: array
          ref: '#/components/schemas/ImageDto'
    DrinkDto:
      type: object
      description: Drink Dto
      required:
        - name
        - description
        - price
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
    ImageDto:
      type: object
      properties:
        id:
          type: String
          format: uuid
        contentType:
          type: string
        filePath:
          type: string
        content:
          type: string
          format: base64

